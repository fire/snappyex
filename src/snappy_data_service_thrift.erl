%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(snappy_data_service_thrift).
-behaviour(thrift_service).


-include("snappy_data_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% getPreferredServer(This, ServerTypes, ServerGroups, FailedServers)
function_info('getPreferredServer', params_type) ->
  {struct, [{1, {set, i32}},
          {2, {set, string}},
          {3, {set, {struct, {'snappydata_types', 'HostAddress'}}}}]}
;
function_info('getPreferredServer', reply_type) ->
  {struct, {'snappydata_types', 'HostAddress'}};
function_info('getPreferredServer', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getAllServersWithPreferredServer(This, ServerTypes, ServerGroups, FailedServers)
function_info('getAllServersWithPreferredServer', params_type) ->
  {struct, [{1, {set, i32}},
          {2, {set, string}},
          {3, {set, {struct, {'snappydata_types', 'HostAddress'}}}}]}
;
function_info('getAllServersWithPreferredServer', reply_type) ->
  {list, {struct, {'snappydata_types', 'HostAddress'}}};
function_info('getAllServersWithPreferredServer', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% openConnection(This, Arguments)
function_info('openConnection', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'OpenConnectionArgs'}}}]}
;
function_info('openConnection', reply_type) ->
  {struct, {'snappydata_types', 'ConnectionProperties'}};
function_info('openConnection', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% execute(This, ConnId, Sql, OutputParams, Attrs, Token)
function_info('execute', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {map, i32, {struct, {'snappydata_types', 'OutputParameter'}}}},
          {4, {struct, {'snappydata_types', 'StatementAttrs'}}},
          {5, string}]}
;
function_info('execute', reply_type) ->
  {struct, {'snappydata_types', 'StatementResult'}};
function_info('execute', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executeUpdate(This, ConnId, Sqls, Attrs, Token)
function_info('executeUpdate', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}},
          {3, {struct, {'snappydata_types', 'StatementAttrs'}}},
          {4, string}]}
;
function_info('executeUpdate', reply_type) ->
  {struct, {'snappydata_types', 'UpdateResult'}};
function_info('executeUpdate', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executeQuery(This, ConnId, Sql, Attrs, Token)
function_info('executeQuery', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {struct, {'snappydata_types', 'StatementAttrs'}}},
          {4, string}]}
;
function_info('executeQuery', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('executeQuery', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% prepareStatement(This, ConnId, Sql, OutputParams, Attrs, Token)
function_info('prepareStatement', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {map, i32, {struct, {'snappydata_types', 'OutputParameter'}}}},
          {4, {struct, {'snappydata_types', 'StatementAttrs'}}},
          {5, string}]}
;
function_info('prepareStatement', reply_type) ->
  {struct, {'snappydata_types', 'PrepareResult'}};
function_info('prepareStatement', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executePrepared(This, StmtId, Params, OutputParams, Token)
function_info('executePrepared', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'snappydata_types', 'Row'}}},
          {3, {map, i32, {struct, {'snappydata_types', 'OutputParameter'}}}},
          {4, string}]}
;
function_info('executePrepared', reply_type) ->
  {struct, {'snappydata_types', 'StatementResult'}};
function_info('executePrepared', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executePreparedUpdate(This, StmtId, Params, Token)
function_info('executePreparedUpdate', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'snappydata_types', 'Row'}}},
          {3, string}]}
;
function_info('executePreparedUpdate', reply_type) ->
  {struct, {'snappydata_types', 'UpdateResult'}};
function_info('executePreparedUpdate', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executePreparedQuery(This, StmtId, Params, Token)
function_info('executePreparedQuery', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'snappydata_types', 'Row'}}},
          {3, string}]}
;
function_info('executePreparedQuery', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('executePreparedQuery', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executePreparedBatch(This, StmtId, ParamsBatch, Token)
function_info('executePreparedBatch', params_type) ->
  {struct, [{1, i32},
          {2, {list, {struct, {'snappydata_types', 'Row'}}}},
          {3, string}]}
;
function_info('executePreparedBatch', reply_type) ->
  {struct, {'snappydata_types', 'UpdateResult'}};
function_info('executePreparedBatch', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% prepareAndExecute(This, ConnId, Sql, ParamsBatch, OutputParams, Attrs, Token)
function_info('prepareAndExecute', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, {struct, {'snappydata_types', 'Row'}}}},
          {4, {map, i32, {struct, {'snappydata_types', 'OutputParameter'}}}},
          {5, {struct, {'snappydata_types', 'StatementAttrs'}}},
          {6, string}]}
;
function_info('prepareAndExecute', reply_type) ->
  {struct, {'snappydata_types', 'StatementResult'}};
function_info('prepareAndExecute', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% beginTransaction(This, ConnId, IsolationLevel, Flags, Token)
function_info('beginTransaction', params_type) ->
  {struct, [{1, i32},
          {2, byte},
          {3, {map, i32, bool}},
          {4, string}]}
;
function_info('beginTransaction', reply_type) ->
  {struct, []};
function_info('beginTransaction', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% setTransactionAttributes(This, ConnId, Flags, Token)
function_info('setTransactionAttributes', params_type) ->
  {struct, [{1, i32},
          {2, {map, i32, bool}},
          {3, string}]}
;
function_info('setTransactionAttributes', reply_type) ->
  {struct, []};
function_info('setTransactionAttributes', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getTransactionAttributes(This, ConnId, Token)
function_info('getTransactionAttributes', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('getTransactionAttributes', reply_type) ->
  {map, i32, bool};
function_info('getTransactionAttributes', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% commitTransaction(This, ConnId, StartNewTransaction, Flags, Token)
function_info('commitTransaction', params_type) ->
  {struct, [{1, i32},
          {2, bool},
          {3, {map, i32, bool}},
          {4, string}]}
;
function_info('commitTransaction', reply_type) ->
  {struct, []};
function_info('commitTransaction', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% rollbackTransaction(This, ConnId, StartNewTransaction, Flags, Token)
function_info('rollbackTransaction', params_type) ->
  {struct, [{1, i32},
          {2, bool},
          {3, {map, i32, bool}},
          {4, string}]}
;
function_info('rollbackTransaction', reply_type) ->
  {struct, []};
function_info('rollbackTransaction', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% prepareCommitTransaction(This, ConnId, Flags, Token)
function_info('prepareCommitTransaction', params_type) ->
  {struct, [{1, i32},
          {2, {map, i32, bool}},
          {3, string}]}
;
function_info('prepareCommitTransaction', reply_type) ->
  bool;
function_info('prepareCommitTransaction', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getNextResultSet(This, CursorId, OtherResultSetBehaviour, Token)
function_info('getNextResultSet', params_type) ->
  {struct, [{1, i32},
          {2, byte},
          {3, string}]}
;
function_info('getNextResultSet', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('getNextResultSet', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getBlobChunk(This, ConnId, LobId, Offset, Size, FreeLobAtEnd, Token)
function_info('getBlobChunk', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, i64},
          {4, i32},
          {5, bool},
          {6, string}]}
;
function_info('getBlobChunk', reply_type) ->
  {struct, {'snappydata_types', 'BlobChunk'}};
function_info('getBlobChunk', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getClobChunk(This, ConnId, LobId, Offset, Size, FreeLobAtEnd, Token)
function_info('getClobChunk', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, i64},
          {4, i32},
          {5, bool},
          {6, string}]}
;
function_info('getClobChunk', reply_type) ->
  {struct, {'snappydata_types', 'ClobChunk'}};
function_info('getClobChunk', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% sendBlobChunk(This, Chunk, ConnId, Token)
function_info('sendBlobChunk', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'BlobChunk'}}},
          {2, i32},
          {3, string}]}
;
function_info('sendBlobChunk', reply_type) ->
  i32;
function_info('sendBlobChunk', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% sendClobChunk(This, Chunk, ConnId, Token)
function_info('sendClobChunk', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'ClobChunk'}}},
          {2, i32},
          {3, string}]}
;
function_info('sendClobChunk', reply_type) ->
  i32;
function_info('sendClobChunk', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% freeLob(This, ConnId, LobId, Token)
function_info('freeLob', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, string}]}
;
function_info('freeLob', reply_type) ->
  {struct, []};
function_info('freeLob', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% scrollCursor(This, CursorId, Offset, OffsetIsAbsolute, FetchReverse, FetchSize, Token)
function_info('scrollCursor', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, bool},
          {4, bool},
          {5, i32},
          {6, string}]}
;
function_info('scrollCursor', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('scrollCursor', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% executeCursorUpdate(This, CursorId, Operations, ChangedRows, ChangedColumnsList, ChangedRowIndexes, Token)
function_info('executeCursorUpdate', params_type) ->
  {struct, [{1, i32},
          {2, {list, byte}},
          {3, {list, {struct, {'snappydata_types', 'Row'}}}},
          {4, {list, {list, i32}}},
          {5, {list, i32}},
          {6, string}]}
;
function_info('executeCursorUpdate', reply_type) ->
  {struct, []};
function_info('executeCursorUpdate', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getServiceMetaData(This, ConnId, Token)
function_info('getServiceMetaData', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('getServiceMetaData', reply_type) ->
  {struct, {'snappydata_types', 'ServiceMetaData'}};
function_info('getServiceMetaData', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getSchemaMetaData(This, SchemaCall, MetadataArgs)
function_info('getSchemaMetaData', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'snappydata_types', 'ServiceMetaDataArgs'}}}]}
;
function_info('getSchemaMetaData', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('getSchemaMetaData', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getIndexInfo(This, MetadataArgs, Unique, Approximate)
function_info('getIndexInfo', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'ServiceMetaDataArgs'}}},
          {2, bool},
          {3, bool}]}
;
function_info('getIndexInfo', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('getIndexInfo', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getUDTs(This, MetadataArgs, Types)
function_info('getUDTs', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'ServiceMetaDataArgs'}}},
          {2, {list, i32}}]}
;
function_info('getUDTs', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('getUDTs', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% getBestRowIdentifier(This, MetadataArgs, Scope, Nullable)
function_info('getBestRowIdentifier', params_type) ->
  {struct, [{1, {struct, {'snappydata_types', 'ServiceMetaDataArgs'}}},
          {2, i32},
          {3, bool}]}
;
function_info('getBestRowIdentifier', reply_type) ->
  {struct, {'snappydata_types', 'RowSet'}};
function_info('getBestRowIdentifier', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% fetchActiveConnections(This, ConnId, Token)
function_info('fetchActiveConnections', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('fetchActiveConnections', reply_type) ->
  {list, {struct, {'snappydata_types', 'ConnectionProperties'}}};
function_info('fetchActiveConnections', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% fetchActiveStatements(This, ConnId, Token)
function_info('fetchActiveStatements', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('fetchActiveStatements', reply_type) ->
  {map, i32, string};
function_info('fetchActiveStatements', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% cancelStatement(This, StmtId, Token)
function_info('cancelStatement', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('cancelStatement', reply_type) ->
  {struct, []};
function_info('cancelStatement', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% closeResultSet(This, CursorId, Token)
function_info('closeResultSet', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('closeResultSet', reply_type) ->
  {struct, []};
function_info('closeResultSet', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% closeStatement(This, StmtId, Token)
function_info('closeStatement', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('closeStatement', reply_type) ->
  {struct, []};
function_info('closeStatement', exceptions) ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyException'}}}]}
;
% closeConnection(This, ConnId, Token)
function_info('closeConnection', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('closeConnection', reply_type) ->
  oneway_void;
function_info('closeConnection', exceptions) ->
  {struct, []}
;
% bulkClose(This, Entities)
function_info('bulkClose', params_type) ->
  {struct, [{1, {list, {struct, {'snappydata_types', 'EntityId'}}}}]}
;
function_info('bulkClose', reply_type) ->
  oneway_void;
function_info('bulkClose', exceptions) ->
  {struct, []}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['getPreferredServer', 'getAllServersWithPreferredServer', 'openConnection', 'execute', 'executeUpdate', 'executeQuery', 'prepareStatement', 'executePrepared', 'executePreparedUpdate', 'executePreparedQuery', 'executePreparedBatch', 'prepareAndExecute', 'beginTransaction', 'setTransactionAttributes', 'getTransactionAttributes', 'commitTransaction', 'rollbackTransaction', 'prepareCommitTransaction', 'getNextResultSet', 'getBlobChunk', 'getClobChunk', 'sendBlobChunk', 'sendClobChunk', 'freeLob', 'scrollCursor', 'executeCursorUpdate', 'getServiceMetaData', 'getSchemaMetaData', 'getIndexInfo', 'getUDTs', 'getBestRowIdentifier', 'fetchActiveConnections', 'fetchActiveStatements', 'cancelStatement', 'closeResultSet', 'closeStatement', 'closeConnection', 'bulkClose'].

