%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(snappydata_types).

-include("snappydata_types.hrl").

-export([struct_info/1, struct_info_ext/1, enum_info/1, enum_names/0, struct_names/0]).

struct_info('Decimal') ->
  {struct, [{1, byte},
          {2, i32},
          {3, string}]}
;

struct_info('Timestamp') ->
  {struct, [{1, i64},
          {2, i32}]}
;

struct_info('JSONField') ->
  {struct, [{1, string},
          {2, bool},
          {3, i32},
          {4, i64},
          {5, double},
          {6, bool},
          {7, i32},
          {8, {list, i32}}]}
;

struct_info('JSONNode') ->
  {struct, [{1, {map, string, {struct, {'snappydata_types', 'JSONField'}}}},
          {2, {struct, {'snappydata_types', 'JSONField'}}},
          {3, i32}]}
;

struct_info('JSONObject') ->
  {struct, [{1, {list, {struct, {'snappydata_types', 'JSONNode'}}}}]}
;

struct_info('BlobChunk') ->
  {struct, [{1, string},
          {2, bool},
          {3, i32},
          {4, i64},
          {5, i64}]}
;

struct_info('ClobChunk') ->
  {struct, [{1, string},
          {2, bool},
          {3, i32},
          {4, i64},
          {5, i64}]}
;

struct_info('ServiceMetaData') ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, i32},
          {5, i32},
          {6, i32},
          {7, string},
          {8, {list, string}},
          {9, {list, string}},
          {10, {list, string}},
          {11, {list, string}},
          {12, {list, string}},
          {13, string},
          {14, string},
          {15, {map, i32, {set, i32}}},
          {16, string},
          {17, string},
          {18, string},
          {19, string},
          {20, i32},
          {21, i32},
          {22, i32},
          {23, i32},
          {24, i32},
          {25, i32},
          {26, i32},
          {27, i32},
          {28, i32},
          {29, i32},
          {30, i32},
          {31, i32},
          {32, i32},
          {33, i32},
          {34, i32},
          {35, i32},
          {36, i32},
          {37, i32},
          {38, i32},
          {39, i32},
          {40, i32},
          {41, byte},
          {42, bool},
          {43, bool},
          {44, bool},
          {45, {map, i32, bool}},
          {46, i32},
          {47, {set, i32}},
          {48, {map, i32, {list, i32}}}]}
;

struct_info('ServiceMetaDataArgs') ->
  {struct, [{1, i32},
          {2, byte},
          {3, string},
          {4, string},
          {5, string},
          {6, {list, string}},
          {7, string},
          {8, string},
          {9, string},
          {10, string},
          {11, string},
          {12, string},
          {13, string},
          {14, i32}]}
;

struct_info('OpenConnectionArgs') ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, string},
          {5, string},
          {6, i32},
          {7, bool},
          {8, {map, string, string}}]}
;

struct_info('ConnectionProperties') ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, string},
          {5, string}]}
;

struct_info('HostAddress') ->
  {struct, [{1, string},
          {2, i32},
          {3, string},
          {4, i32}]}
;

struct_info('SnappyExceptionData') ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;

struct_info('SnappyException') ->
  {struct, [{1, {struct, {'snappydata_types', 'SnappyExceptionData'}}},
          {2, string},
          {3, {list, {struct, {'snappydata_types', 'SnappyExceptionData'}}}}]}
;

struct_info('StatementAttrs') ->
  {struct, [{1, byte},
          {2, bool},
          {3, bool},
          {4, bool},
          {5, {list, i32}},
          {6, {list, string}},
          {7, i32},
          {8, bool},
          {9, i32},
          {10, i32},
          {11, i32},
          {12, i32},
          {13, string},
          {14, bool},
          {15, bool},
          {16, bool},
          {17, {map, i32, bool}}]}
;

struct_info('DateTime') ->
  {struct, [{1, i64}]}
;

struct_info('ColumnValue') ->
  {struct, [{1, bool},
          {2, byte},
          {3, i16},
          {4, i32},
          {5, i64},
          {6, i32},
          {7, double},
          {8, string},
          {9, {struct, {'snappydata_types', 'Decimal'}}},
          {10, {struct, {'snappydata_types', 'DateTime'}}},
          {11, {struct, {'snappydata_types', 'DateTime'}}},
          {12, {struct, {'snappydata_types', 'Timestamp'}}},
          {13, string},
          {14, {struct, {'snappydata_types', 'BlobChunk'}}},
          {15, {struct, {'snappydata_types', 'ClobChunk'}}},
          {16, bool},
          {17, {struct, {'snappydata_types', 'JSONObject'}}},
          {18, string}]}
;

struct_info('ColumnDescriptor') ->
  {struct, [{1, i32},
          {2, i16},
          {3, i16},
          {4, i16},
          {5, string},
          {6, string},
          {7, string}]}
;

struct_info('Row') ->
  {struct, [{1, {list, {struct, {'snappydata_types', 'ColumnValue'}}}}]}
;

struct_info('OutputParameter') ->
  {struct, [{1, i32},
          {2, i32},
          {3, string}]}
;

struct_info('RowSet') ->
  {struct, [{1, {list, {struct, {'snappydata_types', 'Row'}}}},
          {2, byte},
          {3, i32},
          {4, i32},
          {5, i32},
          {6, string},
          {7, {struct, {'snappydata_types', 'HostAddress'}}},
          {8, i32},
          {9, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}},
          {10, string},
          {11, {struct, {'snappydata_types', 'SnappyExceptionData'}}},
          {12, {list, i64}}]}
;

struct_info('PrepareResult') ->
  {struct, [{1, i32},
          {2, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}},
          {3, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}},
          {4, {struct, {'snappydata_types', 'SnappyExceptionData'}}}]}
;

struct_info('UpdateResult') ->
  {struct, [{1, i32},
          {2, {list, i32}},
          {3, {struct, {'snappydata_types', 'RowSet'}}},
          {4, {struct, {'snappydata_types', 'SnappyExceptionData'}}}]}
;

struct_info('StatementResult') ->
  {struct, [{1, {struct, {'snappydata_types', 'RowSet'}}},
          {2, i32},
          {3, {list, i32}},
          {4, {struct, {'snappydata_types', 'Row'}}},
          {5, {struct, {'snappydata_types', 'RowSet'}}},
          {6, {struct, {'snappydata_types', 'SnappyExceptionData'}}},
          {7, {struct, {'snappydata_types', 'PrepareResult'}}}]}
;

struct_info('EntityId') ->
  {struct, [{1, i32},
          {2, byte},
          {3, i32},
          {4, string}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Decimal') ->
  {struct, [{1, required, byte, 'signum', undefined},
          {2, required, i32, 'scale', undefined},
          {3, required, string, 'magnitude', undefined}]}
;

struct_info_ext('Timestamp') ->
  {struct, [{1, required, i64, 'secsSinceEpoch', undefined},
          {2, optional, i32, 'nanos', undefined}]}
;

struct_info_ext('JSONField') ->
  {struct, [{1, optional, string, 'string_val', undefined},
          {2, optional, bool, 'bool_val', undefined},
          {3, optional, i32, 'i32_val', undefined},
          {4, optional, i64, 'i64_val', undefined},
          {5, optional, double, 'double_val', undefined},
          {6, optional, bool, 'null_val', undefined},
          {7, optional, i32, 'ref_val', undefined},
          {8, optional, {list, i32}, 'array_val', []}]}
;

struct_info_ext('JSONNode') ->
  {struct, [{1, optional, {map, string, {struct, {'snappydata_types', 'JSONField'}}}, 'pairs', dict:new()},
          {2, optional, {struct, {'snappydata_types', 'JSONField'}}, 'singleField', #'JSONField'{}},
          {3, required, i32, 'refId', undefined}]}
;

struct_info_ext('JSONObject') ->
  {struct, [{1, required, {list, {struct, {'snappydata_types', 'JSONNode'}}}, 'nodes', []}]}
;

struct_info_ext('BlobChunk') ->
  {struct, [{1, required, string, 'chunk', undefined},
          {2, required, bool, 'last', undefined},
          {3, optional, i32, 'lobId', undefined},
          {4, optional, i64, 'offset', undefined},
          {5, optional, i64, 'totalLength', undefined}]}
;

struct_info_ext('ClobChunk') ->
  {struct, [{1, required, string, 'chunk', undefined},
          {2, required, bool, 'last', undefined},
          {3, optional, i32, 'lobId', undefined},
          {4, optional, i64, 'offset', undefined},
          {5, optional, i64, 'totalLength', undefined}]}
;

struct_info_ext('ServiceMetaData') ->
  {struct, [{1, required, string, 'productName', undefined},
          {2, required, string, 'productVersion', undefined},
          {3, required, i32, 'productMajorVersion', undefined},
          {4, required, i32, 'productMinorVersion', undefined},
          {5, required, i32, 'jdbcMajorVersion', undefined},
          {6, required, i32, 'jdbcMinorVersion', undefined},
          {7, required, string, 'identifierQuote', undefined},
          {8, required, {list, string}, 'sqlKeywords', []},
          {9, required, {list, string}, 'numericFunctions', []},
          {10, required, {list, string}, 'stringFunctions', []},
          {11, required, {list, string}, 'systemFunctions', []},
          {12, required, {list, string}, 'dateTimeFunctions', []},
          {13, required, string, 'searchStringEscape', undefined},
          {14, optional, string, 'extraNameCharacters', undefined},
          {15, required, {map, i32, {set, i32}}, 'supportedCONVERT', dict:new()},
          {16, required, string, 'schemaTerm', undefined},
          {17, required, string, 'procedureTerm', undefined},
          {18, required, string, 'catalogTerm', undefined},
          {19, required, string, 'catalogSeparator', undefined},
          {20, required, i32, 'maxBinaryLiteralLength', undefined},
          {21, required, i32, 'maxCharLiteralLength', undefined},
          {22, required, i32, 'maxColumnsInGroupBy', undefined},
          {23, required, i32, 'maxColumnsInIndex', undefined},
          {24, required, i32, 'maxColumnsInOrderBy', undefined},
          {25, required, i32, 'maxColumnsInSelect', undefined},
          {26, required, i32, 'maxColumnsInTable', undefined},
          {27, required, i32, 'maxConnections', undefined},
          {28, required, i32, 'maxIndexLength', undefined},
          {29, required, i32, 'maxRowSize', undefined},
          {30, required, i32, 'maxStatementLength', undefined},
          {31, required, i32, 'maxOpenStatements', undefined},
          {32, required, i32, 'maxTableNamesInSelect', undefined},
          {33, required, i32, 'maxColumnNameLength', undefined},
          {34, required, i32, 'maxCursorNameLength', undefined},
          {35, required, i32, 'maxSchemaNameLength', undefined},
          {36, required, i32, 'maxProcedureNameLength', undefined},
          {37, required, i32, 'maxCatalogNameLength', undefined},
          {38, required, i32, 'maxTableNameLength', undefined},
          {39, required, i32, 'maxUserNameLength', undefined},
          {40, required, i32, 'defaultTransactionIsolation', undefined},
          {41, required, byte, 'defaultResultSetType', undefined},
          {42, required, bool, 'defaultResultSetHoldabilityHoldCursorsOverCommit', undefined},
          {43, required, bool, 'sqlStateIsXOpen', undefined},
          {44, required, bool, 'catalogAtStart', undefined},
          {45, required, {map, i32, bool}, 'transactionDefaults', dict:new()},
          {46, required, i32, 'rowIdLifeTime', undefined},
          {47, required, {set, i32}, 'supportedFeatures', sets:new()},
          {48, required, {map, i32, {list, i32}}, 'featuresWithParams', dict:new()}]}
;

struct_info_ext('ServiceMetaDataArgs') ->
  {struct, [{1, required, i32, 'connId', undefined},
          {2, required, byte, 'driverType', undefined},
          {3, optional, string, 'token', undefined},
          {4, optional, string, 'schema', undefined},
          {5, optional, string, 'table', undefined},
          {6, optional, {list, string}, 'tableTypes', []},
          {7, optional, string, 'columnName', undefined},
          {8, optional, string, 'foreignSchema', undefined},
          {9, optional, string, 'foreignTable', undefined},
          {10, optional, string, 'procedureName', undefined},
          {11, optional, string, 'functionName', undefined},
          {12, optional, string, 'attributeName', undefined},
          {13, optional, string, 'typeName', undefined},
          {14, optional, i32, 'typeId', undefined}]}
;

struct_info_ext('OpenConnectionArgs') ->
  {struct, [{1, required, string, 'clientHostName', undefined},
          {2, required, string, 'clientID', undefined},
          {3, required, i32, 'security', undefined},
          {4, optional, string, 'userName', undefined},
          {5, optional, string, 'password', undefined},
          {6, optional, i32, 'tokenSize', undefined},
          {7, optional, bool, 'useStringForDecimal', undefined},
          {8, optional, {map, string, string}, 'properties', dict:new()}]}
;

struct_info_ext('ConnectionProperties') ->
  {struct, [{1, required, i32, 'connId', undefined},
          {2, required, string, 'clientHostName', undefined},
          {3, required, string, 'clientID', undefined},
          {4, optional, string, 'userName', undefined},
          {5, optional, string, 'token', undefined}]}
;

struct_info_ext('HostAddress') ->
  {struct, [{1, required, string, 'hostName', undefined},
          {2, required, i32, 'port', undefined},
          {3, optional, string, 'ipAddress', undefined},
          {4, optional, i32, 'serverType', undefined}]}
;

struct_info_ext('SnappyExceptionData') ->
  {struct, [{1, required, string, 'reason', undefined},
          {2, required, string, 'sqlState', undefined},
          {3, required, i32, 'severity', undefined}]}
;

struct_info_ext('SnappyException') ->
  {struct, [{1, required, {struct, {'snappydata_types', 'SnappyExceptionData'}}, 'exceptionData', #'SnappyExceptionData'{}},
          {2, required, string, 'serverInfo', undefined},
          {3, optional, {list, {struct, {'snappydata_types', 'SnappyExceptionData'}}}, 'nextExceptions', []}]}
;

struct_info_ext('StatementAttrs') ->
  {struct, [{1, optional, byte, 'resultSetType', undefined},
          {2, optional, bool, 'updatable', undefined},
          {3, optional, bool, 'holdCursorsOverCommit', undefined},
          {4, optional, bool, 'requireAutoIncCols', undefined},
          {5, optional, {list, i32}, 'autoIncColumns', []},
          {6, optional, {list, string}, 'autoIncColumnNames', []},
          {7, optional, i32, 'batchSize', 1024},
          {8, optional, bool, 'fetchReverse', undefined},
          {9, optional, i32, 'lobChunkSize', undefined},
          {10, optional, i32, 'maxRows', undefined},
          {11, optional, i32, 'maxFieldSize', undefined},
          {12, optional, i32, 'timeout', undefined},
          {13, optional, string, 'cursorName', undefined},
          {14, optional, bool, 'possibleDuplicate', undefined},
          {15, optional, bool, 'poolable', undefined},
          {16, optional, bool, 'doEscapeProcessing', undefined},
          {17, optional, {map, i32, bool}, 'pendingTransactionAttrs', dict:new()}]}
;

struct_info_ext('DateTime') ->
  {struct, [{1, required, i64, 'secsSinceEpoch', undefined}]}
;

struct_info_ext('ColumnValue') ->
  {struct, [{1, optional, bool, 'bool_val', undefined},
          {2, optional, byte, 'byte_val', undefined},
          {3, optional, i16, 'i16_val', undefined},
          {4, optional, i32, 'i32_val', undefined},
          {5, optional, i64, 'i64_val', undefined},
          {6, optional, i32, 'float_val', undefined},
          {7, optional, double, 'double_val', undefined},
          {8, optional, string, 'string_val', undefined},
          {9, optional, {struct, {'snappydata_types', 'Decimal'}}, 'decimal_val', #'Decimal'{}},
          {10, optional, {struct, {'snappydata_types', 'DateTime'}}, 'date_val', #'DateTime'{}},
          {11, optional, {struct, {'snappydata_types', 'DateTime'}}, 'time_val', #'DateTime'{}},
          {12, optional, {struct, {'snappydata_types', 'Timestamp'}}, 'timestamp_val', #'Timestamp'{}},
          {13, optional, string, 'binary_val', undefined},
          {14, optional, {struct, {'snappydata_types', 'BlobChunk'}}, 'blob_val', #'BlobChunk'{}},
          {15, optional, {struct, {'snappydata_types', 'ClobChunk'}}, 'clob_val', #'ClobChunk'{}},
          {16, optional, bool, 'null_val', undefined},
          {17, optional, {struct, {'snappydata_types', 'JSONObject'}}, 'json_val', #'JSONObject'{}},
          {18, optional, string, 'java_val', undefined}]}
;

struct_info_ext('ColumnDescriptor') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, required, i16, 'descFlags', undefined},
          {3, required, i16, 'precision', undefined},
          {4, optional, i16, 'scale', undefined},
          {5, optional, string, 'name', undefined},
          {6, optional, string, 'fullTableName', undefined},
          {7, optional, string, 'udtTypeAndClassName', undefined}]}
;

struct_info_ext('Row') ->
  {struct, [{1, required, {list, {struct, {'snappydata_types', 'ColumnValue'}}}, 'values', []}]}
;

struct_info_ext('OutputParameter') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, optional, i32, 'scale', undefined},
          {3, optional, string, 'typeName', undefined}]}
;

struct_info_ext('RowSet') ->
  {struct, [{1, required, {list, {struct, {'snappydata_types', 'Row'}}}, 'rows', []},
          {2, required, byte, 'flags', undefined},
          {3, required, i32, 'cursorId', undefined},
          {4, required, i32, 'statementId', undefined},
          {5, required, i32, 'connId', undefined},
          {6, optional, string, 'token', undefined},
          {7, optional, {struct, {'snappydata_types', 'HostAddress'}}, 'source', #'HostAddress'{}},
          {8, optional, i32, 'offset', undefined},
          {9, optional, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}, 'metadata', []},
          {10, optional, string, 'cursorName', undefined},
          {11, optional, {struct, {'snappydata_types', 'SnappyExceptionData'}}, 'warnings', #'SnappyExceptionData'{}},
          {12, optional, {list, i64}, 'rowIdsForUpdateOrDelete', []}]}
;

struct_info_ext('PrepareResult') ->
  {struct, [{1, required, i32, 'statementId', undefined},
          {2, required, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}, 'parameterMetaData', []},
          {3, optional, {list, {struct, {'snappydata_types', 'ColumnDescriptor'}}}, 'resultSetMetaData', []},
          {4, optional, {struct, {'snappydata_types', 'SnappyExceptionData'}}, 'warnings', #'SnappyExceptionData'{}}]}
;

struct_info_ext('UpdateResult') ->
  {struct, [{1, optional, i32, 'updateCount', undefined},
          {2, optional, {list, i32}, 'batchUpdateCounts', []},
          {3, optional, {struct, {'snappydata_types', 'RowSet'}}, 'generatedKeys', #'RowSet'{}},
          {4, optional, {struct, {'snappydata_types', 'SnappyExceptionData'}}, 'warnings', #'SnappyExceptionData'{}}]}
;

struct_info_ext('StatementResult') ->
  {struct, [{1, optional, {struct, {'snappydata_types', 'RowSet'}}, 'resultSet', #'RowSet'{}},
          {2, optional, i32, 'updateCount', undefined},
          {3, optional, {list, i32}, 'batchUpdateCounts', []},
          {4, optional, {struct, {'snappydata_types', 'Row'}}, 'procedureOutParams', #'Row'{}},
          {5, optional, {struct, {'snappydata_types', 'RowSet'}}, 'generatedKeys', #'RowSet'{}},
          {6, optional, {struct, {'snappydata_types', 'SnappyExceptionData'}}, 'warnings', #'SnappyExceptionData'{}},
          {7, optional, {struct, {'snappydata_types', 'PrepareResult'}}, 'preparedResult', #'PrepareResult'{}}]}
;

struct_info_ext('EntityId') ->
  {struct, [{1, required, i32, 'id', undefined},
          {2, required, byte, 'type', undefined},
          {3, required, i32, 'connId', undefined},
          {4, optional, string, 'token', undefined}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

struct_names() ->
  ['Decimal', 'Timestamp', 'JSONField', 'JSONNode', 'JSONObject', 'BlobChunk', 'ClobChunk', 'ServiceMetaData', 'ServiceMetaDataArgs', 'OpenConnectionArgs', 'ConnectionProperties', 'HostAddress', 'SnappyExceptionData', 'StatementAttrs', 'DateTime', 'ColumnValue', 'ColumnDescriptor', 'Row', 'OutputParameter', 'RowSet', 'PrepareResult', 'UpdateResult', 'StatementResult', 'EntityId'].

enum_info('SnappyType') ->
  [
    {'BOOLEAN', 1},
    {'TINYINT', 2},
    {'SMALLINT', 3},
    {'INTEGER', 4},
    {'BIGINT', 5},
    {'FLOAT', 6},
    {'REAL', 7},
    {'DOUBLE', 8},
    {'DECIMAL', 9},
    {'CHAR', 10},
    {'VARCHAR', 11},
    {'LONGVARCHAR', 12},
    {'DATE', 13},
    {'TIME', 14},
    {'TIMESTAMP', 15},
    {'BINARY', 16},
    {'VARBINARY', 17},
    {'LONGVARBINARY', 18},
    {'BLOB', 19},
    {'CLOB', 20},
    {'SQLXML', 21},
    {'NULLTYPE', 22},
    {'ARRAY', 23},
    {'MAP', 24},
    {'STRUCT', 25},
    {'OTHER', 26},
    {'JSON_OBJECT', 27},
    {'JAVA_OBJECT', 28}
  ];

enum_info('TransactionAttribute') ->
  [
    {'AUTOCOMMIT', 1},
    {'READ_ONLY_CONNECTION', 2},
    {'WAITING_MODE', 3},
    {'DISABLE_BATCHING', 4},
    {'SYNC_COMMITS', 5}
  ];

enum_info('RowIdLifetime') ->
  [
    {'ROWID_UNSUPPORTED', 1},
    {'ROWID_VALID_OTHER', 2},
    {'ROWID_VALID_SESSION', 3},
    {'ROWID_VALID_TRANSACTION', 4},
    {'ROWID_VALID_FOREVER', 5}
  ];

enum_info('ServiceFeature') ->
  [
    {'ALL_PROCEDURES_CALLABLE', 1},
    {'ALL_TABLES_SELECTABLE', 2},
    {'INTEGRITY_ENHANCEMENT', 3},
    {'NULLS_SORTED_HIGH', 4},
    {'NULLS_SORTED_LOW', 5},
    {'NULLS_SORTED_START', 6},
    {'NULLS_SORTED_END', 7},
    {'USES_LOCAL_FILES', 8},
    {'USES_LOCAL_FILE_PER_TABLE', 9},
    {'MIXEDCASE_IDENTIFIERS', 10},
    {'MIXEDCASE_QUOTED_IDENTIFIERS', 11},
    {'STORES_UPPERCASE_IDENTIFIERS', 12},
    {'STORES_LOWERCASE_IDENTIFIERS', 13},
    {'STORES_MIXEDCASE_IDENTIFIERS', 14},
    {'STORES_UPPERCASE_QUOTED_IDENTIFIERS', 15},
    {'STORES_LOWERCASE_QUOTED_IDENTIFIERS', 16},
    {'STORES_MIXEDCASE_QUOTED_IDENTIFIERS', 17},
    {'ALTER_TABLE_ADD_COLUMN', 18},
    {'ALTER_TABLE_DROP_COLUMN', 19},
    {'COLUMN_ALIASING', 20},
    {'NULL_CONCAT_NON_NULL_IS_NULL', 21},
    {'CONVERT', 22},
    {'TABLE_CORRELATION_NAMES', 23},
    {'TABLE_CORRELATION_NAMES_DIFFERENT', 24},
    {'ORDER_BY_EXPRESSIONS', 25},
    {'ORDER_BY_UNRELATED', 26},
    {'GROUP_BY', 27},
    {'GROUP_BY_UNRELATED', 28},
    {'GROUP_BY_BEYOND_SELECT', 29},
    {'LIKE_ESCAPE', 30},
    {'MULTIPLE_RESULTSETS', 31},
    {'MULTIPLE_TRANSACTIONS', 32},
    {'NON_NULLABLE_COLUMNS', 33},
    {'SQL_GRAMMAR_MINIMUM', 34},
    {'SQL_GRAMMAR_CORE', 35},
    {'SQL_GRAMMAR_EXTENDED', 36},
    {'SQL_GRAMMAR_ANSI92_ENTRY', 37},
    {'SQL_GRAMMAR_ANSI92_INTERMEDIATE', 38},
    {'SQL_GRAMMAR_ANSI92_FULL', 39},
    {'OUTER_JOINS', 40},
    {'OUTER_JOINS_FULL', 41},
    {'OUTER_JOINS_LIMITED', 42},
    {'SCHEMAS_IN_DMLS', 43},
    {'SCHEMAS_IN_PROCEDURE_CALLS', 44},
    {'SCHEMAS_IN_TABLE_DEFS', 45},
    {'SCHEMAS_IN_INDEX_DEFS', 46},
    {'SCHEMAS_IN_PRIVILEGE_DEFS', 47},
    {'AUTOCOMMIT_FAILURE_CLOSES_ALL_RESULTSETS', 48},
    {'CATALOGS_IN_DMLS', 49},
    {'CATALOGS_IN_PROCEDURE_CALLS', 50},
    {'CATALOGS_IN_TABLE_DEFS', 51},
    {'CATALOGS_IN_INDEX_DEFS', 52},
    {'CATALOGS_IN_PRIVILEGE_DEFS', 53},
    {'POSITIONED_DELETE', 54},
    {'POSITIONED_UPDATE', 55},
    {'SELECT_FOR_UPDATE', 56},
    {'STORED_PROCEDURES', 57},
    {'SUBQUERIES_IN_COMPARISONS', 58},
    {'SUBQUERIES_IN_EXISTS', 59},
    {'SUBQUERIES_IN_INS', 60},
    {'SUBQUERIES_IN_QUANTIFIEDS', 61},
    {'SUBQUERIES_CORRELATED', 62},
    {'UNION', 63},
    {'UNION_ALL', 64},
    {'OPEN_CURSORS_ACROSS_COMMIT', 65},
    {'OPEN_CURSORS_ACROSS_ROLLBACK', 66},
    {'OPEN_STATEMENTS_ACROSS_COMMIT', 67},
    {'OPEN_STATEMENTS_ACROSS_ROLLBACK', 68},
    {'MAX_ROWSIZE_INCLUDES_BLOBSIZE', 69},
    {'TRANSACTIONS', 70},
    {'TRANSACTIONS_BOTH_DMLS_AND_DDLS', 71},
    {'TRANSACTIONS_DMLS_ONLY', 72},
    {'TRANSACTIONS_DDLS_IMPLICIT_COMMIT', 73},
    {'TRANSACTIONS_DDLS_IGNORED', 74},
    {'TRANSACTIONS_SAVEPOINTS', 75},
    {'CALLABLE_NAMED_PARAMETERS', 76},
    {'CALLABLE_MULTIPLE_OPEN_RESULTSETS', 77},
    {'GENERATED_KEYS_RETRIEVAL', 78},
    {'GENERATED_KEYS_ALWAYS_RETURNED', 79},
    {'BATCH_UPDATES', 80},
    {'RESULTSET_FORWARD_ONLY', 81},
    {'RESULTSET_SCROLL_INSENSITIVE', 82},
    {'RESULTSET_SCROLL_SENSITIVE', 83},
    {'RESULTSET_HOLDABILITY_CLOSE_CURSORS_AT_COMMIT', 84},
    {'RESULTSET_HOLDABILITY_HOLD_CURSORS_OVER_COMMIT', 85},
    {'LOB_UPDATES_COPY', 86},
    {'STATEMENT_POOLING', 87},
    {'STORED_FUNCTIONS_USING_CALL', 88}
  ];

enum_info('ServiceFeatureParameterized') ->
  [
    {'TRANSACTIONS_SUPPORT_ISOLATION', 1},
    {'RESULTSET_TYPE', 2},
    {'RESULTSET_CONCURRENCY_READ_ONLY', 3},
    {'RESULTSET_CONCURRENCY_UPDATABLE', 4},
    {'RESULTSET_OWN_UPDATES_VISIBLE', 5},
    {'RESULTSET_OWN_DELETES_VISIBLE', 6},
    {'RESULTSET_OWN_INSERTS_VISIBLE', 7},
    {'RESULTSET_OTHERS_UPDATES_VISIBLE', 8},
    {'RESULTSET_OTHERS_DELETES_VISIBLE', 9},
    {'RESULTSET_OTHERS_INSERTS_VISIBLE', 10},
    {'RESULTSET_UPDATES_DETECTED', 11},
    {'RESULTSET_DELETES_DETECTED', 12},
    {'RESULTSET_INSERTS_DETECTED', 13}
  ];

enum_info('ServiceMetaDataCall') ->
  [
    {'CATALOGS', 1},
    {'SCHEMAS', 2},
    {'TABLES', 3},
    {'TABLETYPES', 4},
    {'COLUMNS', 5},
    {'TABLEPRIVILEGES', 6},
    {'COLUMNPRIVILEGES', 7},
    {'PRIMARYKEYS', 8},
    {'IMPORTEDKEYS', 9},
    {'EXPORTEDKEYS', 10},
    {'CROSSREFERENCE', 11},
    {'PROCEDURES', 12},
    {'FUNCTIONS', 13},
    {'PROCEDURECOLUMNS', 14},
    {'FUNCTIONCOLUMNS', 15},
    {'ATTRIBUTES', 16},
    {'TYPEINFO', 17},
    {'SUPERTYPES', 18},
    {'SUPERTABLES', 19},
    {'VERSIONCOLUMNS', 20},
    {'CLIENTINFOPROPS', 21},
    {'PSEUDOCOLUMNS', 22}
  ];

enum_info('SecurityMechanism') ->
  [
    {'PLAIN', 1},
    {'DIFFIE_HELLMAN', 2}
  ];

enum_info('ServerType') ->
  [
    {'DRDA', 1},
    {'THRIFT_LOCATOR_CP', 2},
    {'THRIFT_LOCATOR_BP', 3},
    {'THRIFT_LOCATOR_CP_SSL', 4},
    {'THRIFT_LOCATOR_BP_SSL', 5},
    {'THRIFT_SNAPPY_CP', 6},
    {'THRIFT_SNAPPY_BP', 7},
    {'THRIFT_SNAPPY_CP_SSL', 8},
    {'THRIFT_SNAPPY_BP_SSL', 9}
  ];

enum_info(_) -> erlang:error(function_clause).

enum_names() ->
  ['SnappyType', 'TransactionAttribute', 'RowIdLifetime', 'ServiceFeature', 'ServiceFeatureParameterized', 'ServiceMetaDataCall', 'SecurityMechanism', 'ServerType'].

